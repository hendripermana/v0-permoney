# ============================================================================
# PERMONEY BACKEND CONFIGURATION
# ============================================================================
# Copy this file to .env and update the values according to your setup

# ============================================================================
# DATABASE CONFIGURATION
# ============================================================================
# PostgreSQL Database Connection
# Format: postgresql://username:password@host:port/database_name
# For local development with default PostgreSQL installation:
DATABASE_URL="postgresql://postgres:password@localhost:5432/permoney"

# Alternative: If you want to use separate database credentials (DATABASE_URL will be generated automatically when these are provided)
DB_HOST=localhost
DB_PORT=5432
DB_USERNAME=postgres
DB_PASSWORD=postgres
DB_NAME=permoney
# Optional compatibility aliases for docker-compose setups
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
POSTGRES_DB=permoney

# Database Connection Pool Settings
DB_MAX_CONNECTIONS="10"
DB_CONNECTION_TIMEOUT="30000"

# ============================================================================
# AUTHENTICATION & SECURITY
# ============================================================================
# Clerk Authentication (Recommended)
# Get these from https://clerk.com/docs/quickstarts/nextjs
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY="pk_test_your-clerk-publishable-key"
CLERK_SECRET_KEY="sk_test_your-clerk-secret-key"
NEXT_PUBLIC_CLERK_SIGN_IN_URL="/sign-in"
NEXT_PUBLIC_CLERK_SIGN_UP_URL="/sign-up"
NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL="/onboarding"
NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL="/onboarding"

# Legacy JWT Configuration (for backward compatibility)
JWT_SECRET="your-super-secret-jwt-key-change-this-in-production"
JWT_ACCESS_EXPIRES_IN="15m"
JWT_REFRESH_EXPIRES_IN="7d"

# Session Configuration
SESSION_SECRET="your-super-secret-session-key-change-this-in-production"
SESSION_MAX_AGE="86400000"

# Passkey Configuration
PASSKEY_CHALLENGE_TIMEOUT="300000"

# ============================================================================
# APPLICATION SETTINGS
# ============================================================================
# Server Configuration
PORT="3001"
NODE_ENV="development"
API_PREFIX="api"
LOG_LEVEL="info"

# CORS Configuration (comma-separated origins)
CORS_ORIGINS="http://localhost:3000,http://localhost:3002"

# Security Features
ENABLE_HELMET="true"
ENABLE_CSRF="false"
ENABLE_SWAGGER="true"

# Rate Limiting
RATE_LIMIT_WINDOW="60000"
RATE_LIMIT_MAX="100"

# ============================================================================
# CACHE CONFIGURATION (Optional)
# ============================================================================
# Redis Configuration (optional, for caching)
REDIS_URL="redis://localhost:6379"
REDIS_MAX_RETRIES="3"
REDIS_RETRY_DELAY="100"

# Cache Settings
CACHE_DEFAULT_TTL="3600"
CACHE_MAX_ITEMS="1000"
CACHE_ENABLE_COMPRESSION="false"

# ============================================================================
# EXTERNAL SERVICES (Optional)
# ============================================================================
# Exchange Rate API
EXCHANGE_RATE_API_URL="https://api.exchangerate-api.com/v4/latest"
EXCHANGE_RATE_API_KEY=""
EXCHANGE_RATE_API_TIMEOUT="5000"

# OCR Service
OCR_SERVICE_URL=""
OCR_SERVICE_API_KEY=""
OCR_SERVICE_TIMEOUT="30000"

# Email Service
EMAIL_PROVIDER="sendgrid"
EMAIL_API_KEY=""
FROM_EMAIL="noreply@permoney.com"

# ============================================================================
# FILE UPLOAD (Optional)
# ============================================================================
UPLOAD_DIR="./uploads"
MAX_FILE_SIZE="10485760"

# ============================================================================
# DEVELOPMENT SETUP INSTRUCTIONS
# ============================================================================
# 1. Install PostgreSQL if not already installed:
#    - macOS: brew install postgresql
#    - Ubuntu: sudo apt-get install postgresql postgresql-contrib
#    - Windows: Download from https://www.postgresql.org/download/
#
# 2. Start PostgreSQL and ensure the admin user (default: postgres) has the password matching .env
#
# 3. Run npm run db:setup to automatically create database, run migrations, and seed data
#
# 4. Start the application:
#    npm run dev

# ============================================================================
# PRODUCTION SETUP
# ============================================================================
# For production deployment:
# 1. Use strong, unique secrets for JWT_SECRET and SESSION_SECRET
# 2. Set NODE_ENV="production"
# 3. Use a managed database service (AWS RDS, Google Cloud SQL, etc.)
# 4. Configure proper CORS origins
# 5. Enable security features (HELMET, CSRF)
# 6. Set up monitoring and logging
# 7. Use environment-specific configuration
