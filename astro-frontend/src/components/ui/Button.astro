---
export interface Props {
  variant?: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link';
  size?: 'default' | 'sm' | 'lg' | 'icon';
  disabled?: boolean;
  type?: 'button' | 'submit' | 'reset';
  class?: string;
  onclick?: string;
  href?: string;
}

const {
  variant = 'default',
  size = 'default',
  disabled = false,
  type = 'button',
  class: className,
  onclick,
  href
} = Astro.props;

const baseClasses = 'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background';

const variants = {
  default: 'bg-primary text-primary-foreground hover:bg-primary/90',
  destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',
  outline: 'border border-input hover:bg-accent hover:text-accent-foreground',
  secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
  ghost: 'hover:bg-accent hover:text-accent-foreground',
  link: 'underline-offset-4 hover:underline text-primary'
};

const sizes = {
  default: 'h-10 py-2 px-4',
  sm: 'h-9 px-3 rounded-md',
  lg: 'h-11 px-8 rounded-md',
  icon: 'h-10 w-10'
};

const classes = `${baseClasses} ${variants[variant]} ${sizes[size]} ${className || ''}`;
---

{
  href ? (
    <a href={href} class:list={[classes]} role="button">
      <slot />
    </a>
  ) : (
    <button
      type={type}
      disabled={disabled}
      onclick={onclick}
      class:list={[classes]}
    >
      <slot />
    </button>
  )
}
