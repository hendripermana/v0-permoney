---
import DashboardLayout from '../../layouts/DashboardLayout.astro';
import { Dashboard } from '../../components/Dashboard';
import { api } from '../../lib/api';

// Get household ID from URL params
export async function getStaticPaths() {
  // For now, return a single path. In production, fetch from API
  return [
    { params: { householdId: 'default-household' } }
  ];
}

const { householdId } = Astro.params;

// Server-side data fetching
const dashboardData = await api.getServer(`/households/${householdId}/analytics/dashboard`);

const title = `Dashboard - ${dashboardData?.householdName || 'Personal Finance'}`;
---

<DashboardLayout {title} {householdId}>
  <!-- Server-rendered content -->
  <div class="space-y-6">
    <!-- Static content that renders immediately -->
    <div class="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
      <div class="rounded-lg border bg-card text-card-foreground shadow-sm p-6">
        <div class="flex items-center justify-between space-y-0 pb-2">
          <h3 class="text-sm font-medium">Total Balance</h3>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            class="h-4 w-4 text-muted-foreground"
          >
            <path d="M12 2v20m10-10H2" />
          </svg>
        </div>
        <div class="text-2xl font-bold">
          {dashboardData?.totalBalance ? new Intl.NumberFormat('id-ID', {
            style: 'currency',
            currency: 'IDR'
          }).format(dashboardData.totalBalance) : 'Loading...'}
        </div>
      </div>

      <div class="rounded-lg border bg-card text-card-foreground shadow-sm p-6">
        <div class="flex items-center justify-between space-y-0 pb-2">
          <h3 class="text-sm font-medium">Monthly Income</h3>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            class="h-4 w-4 text-muted-foreground"
          >
            <path d="M12 2v20m10-10H2" />
          </svg>
        </div>
        <div class="text-2xl font-bold text-green-600">
          +{dashboardData?.monthlyIncome ? new Intl.NumberFormat('id-ID', {
            style: 'currency',
            currency: 'IDR'
          }).format(dashboardData.monthlyIncome) : 'Loading...'}
        </div>
      </div>

      <div class="rounded-lg border bg-card text-card-foreground shadow-sm p-6">
        <div class="flex items-center justify-between space-y-0 pb-2">
          <h3 class="text-sm font-medium">Monthly Expenses</h3>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            class="h-4 w-4 text-muted-foreground"
          >
            <path d="M12 2v20m10-10H2" />
          </svg>
        </div>
        <div class="text-2xl font-bold text-red-600">
          -{dashboardData?.monthlyExpenses ? new Intl.NumberFormat('id-ID', {
            style: 'currency',
            currency: 'IDR'
          }).format(dashboardData.monthlyExpenses) : 'Loading...'}
        </div>
      </div>

      <div class="rounded-lg border bg-card text-card-foreground shadow-sm p-6">
        <div class="flex items-center justify-between space-y-0 pb-2">
          <h3 class="text-sm font-medium">Net Income</h3>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            class="h-4 w-4 text-muted-foreground"
          >
            <path d="M12 2v20m10-10H2" />
          </svg>
        </div>
        <div class={`text-2xl font-bold ${dashboardData && (dashboardData.monthlyIncome - dashboardData.monthlyExpenses) >= 0 ? 'text-green-600' : 'text-red-600'}`}>
          {dashboardData ? (
            (dashboardData.monthlyIncome - dashboardData.monthlyExpenses) >= 0 ? '+' : ''
          ) + new Intl.NumberFormat('id-ID', {
            style: 'currency',
            currency: 'IDR'
          }).format(dashboardData.monthlyIncome - dashboardData.monthlyExpenses) : 'Loading...'}
        </div>
      </div>
    </div>

    <!-- Interactive components as islands -->
    <div class="space-y-6">
      <Dashboard householdId={householdId} client:load />
    </div>
  </div>
</DashboardLayout>

<script>
  // Hydrate the dashboard component
  import { Dashboard } from '../components/Dashboard';
</script>
