
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  name: 'name',
  avatarUrl: 'avatarUrl',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HouseholdScalarFieldEnum = {
  id: 'id',
  name: 'name',
  baseCurrency: 'baseCurrency',
  settings: 'settings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HouseholdMemberScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  householdId: 'householdId',
  role: 'role',
  permissions: 'permissions',
  joinedAt: 'joinedAt'
};

exports.Prisma.InstitutionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  logoUrl: 'logoUrl',
  country: 'country',
  type: 'type',
  createdAt: 'createdAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  householdId: 'householdId',
  name: 'name',
  type: 'type',
  subtype: 'subtype',
  currency: 'currency',
  institutionId: 'institutionId',
  accountNumber: 'accountNumber',
  balanceCents: 'balanceCents',
  isActive: 'isActive',
  ownerId: 'ownerId',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MerchantScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  logoUrl: 'logoUrl',
  color: 'color',
  createdAt: 'createdAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  icon: 'icon',
  color: 'color',
  type: 'type',
  parentId: 'parentId',
  householdId: 'householdId',
  isActive: 'isActive',
  isEditable: 'isEditable',
  isArchived: 'isArchived',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  householdId: 'householdId',
  amountCents: 'amountCents',
  currency: 'currency',
  originalAmountCents: 'originalAmountCents',
  originalCurrency: 'originalCurrency',
  exchangeRate: 'exchangeRate',
  description: 'description',
  categoryId: 'categoryId',
  merchant: 'merchant',
  merchantId: 'merchantId',
  merchantName: 'merchantName',
  merchantLogoUrl: 'merchantLogoUrl',
  merchantColor: 'merchantColor',
  date: 'date',
  accountId: 'accountId',
  transferAccountId: 'transferAccountId',
  receiptUrl: 'receiptUrl',
  metadata: 'metadata',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionTagScalarFieldEnum = {
  transactionId: 'transactionId',
  tag: 'tag'
};

exports.Prisma.TransactionSplitScalarFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  categoryId: 'categoryId',
  amountCents: 'amountCents',
  description: 'description',
  createdAt: 'createdAt'
};

exports.Prisma.LedgerEntryScalarFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  accountId: 'accountId',
  type: 'type',
  amountCents: 'amountCents',
  currency: 'currency',
  createdAt: 'createdAt'
};

exports.Prisma.DebtScalarFieldEnum = {
  id: 'id',
  householdId: 'householdId',
  type: 'type',
  name: 'name',
  creditor: 'creditor',
  principalAmountCents: 'principalAmountCents',
  currentBalanceCents: 'currentBalanceCents',
  currency: 'currency',
  interestRate: 'interestRate',
  marginRate: 'marginRate',
  startDate: 'startDate',
  maturityDate: 'maturityDate',
  isActive: 'isActive',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DebtPaymentScalarFieldEnum = {
  id: 'id',
  debtId: 'debtId',
  amountCents: 'amountCents',
  currency: 'currency',
  paymentDate: 'paymentDate',
  principalAmountCents: 'principalAmountCents',
  interestAmountCents: 'interestAmountCents',
  transactionId: 'transactionId',
  createdAt: 'createdAt'
};

exports.Prisma.BudgetScalarFieldEnum = {
  id: 'id',
  householdId: 'householdId',
  name: 'name',
  period: 'period',
  totalAllocatedCents: 'totalAllocatedCents',
  currency: 'currency',
  startDate: 'startDate',
  endDate: 'endDate',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BudgetCategoryScalarFieldEnum = {
  id: 'id',
  budgetId: 'budgetId',
  categoryId: 'categoryId',
  allocatedAmountCents: 'allocatedAmountCents',
  spentAmountCents: 'spentAmountCents',
  carryOverCents: 'carryOverCents',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WishlistItemScalarFieldEnum = {
  id: 'id',
  householdId: 'householdId',
  name: 'name',
  url: 'url',
  currentPriceCents: 'currentPriceCents',
  targetPriceCents: 'targetPriceCents',
  currency: 'currency',
  imageUrl: 'imageUrl',
  merchant: 'merchant',
  linkedGoalId: 'linkedGoalId',
  isPurchased: 'isPurchased',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PriceHistoryScalarFieldEnum = {
  id: 'id',
  wishlistItemId: 'wishlistItemId',
  priceCents: 'priceCents',
  currency: 'currency',
  recordedAt: 'recordedAt'
};

exports.Prisma.GratitudeEntryScalarFieldEnum = {
  id: 'id',
  householdId: 'householdId',
  giver: 'giver',
  type: 'type',
  categoryId: 'categoryId',
  transactionId: 'transactionId',
  estimatedValueCents: 'estimatedValueCents',
  currency: 'currency',
  description: 'description',
  date: 'date',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.ExchangeRateScalarFieldEnum = {
  id: 'id',
  fromCurrency: 'fromCurrency',
  toCurrency: 'toCurrency',
  rate: 'rate',
  date: 'date',
  source: 'source',
  createdAt: 'createdAt'
};

exports.Prisma.PasskeyScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  credentialId: 'credentialId',
  publicKey: 'publicKey',
  counter: 'counter',
  transports: 'transports',
  createdAt: 'createdAt',
  lastUsedAt: 'lastUsedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress',
  createdAt: 'createdAt'
};

exports.Prisma.UserEventScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  householdId: 'householdId',
  eventType: 'eventType',
  eventData: 'eventData',
  resourceType: 'resourceType',
  resourceId: 'resourceId',
  sessionId: 'sessionId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  timestamp: 'timestamp'
};

exports.Prisma.SpendingPatternScalarFieldEnum = {
  id: 'id',
  householdId: 'householdId',
  userId: 'userId',
  patternType: 'patternType',
  categoryId: 'categoryId',
  merchant: 'merchant',
  dayOfWeek: 'dayOfWeek',
  hourOfDay: 'hourOfDay',
  month: 'month',
  averageAmountCents: 'averageAmountCents',
  frequency: 'frequency',
  confidenceScore: 'confidenceScore',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.FinancialInsightScalarFieldEnum = {
  id: 'id',
  householdId: 'householdId',
  insightType: 'insightType',
  title: 'title',
  description: 'description',
  data: 'data',
  priority: 'priority',
  isActionable: 'isActionable',
  isDismissed: 'isDismissed',
  validUntil: 'validUntil',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RecurringTransactionScalarFieldEnum = {
  id: 'id',
  householdId: 'householdId',
  name: 'name',
  description: 'description',
  amountCents: 'amountCents',
  currency: 'currency',
  accountId: 'accountId',
  transferAccountId: 'transferAccountId',
  categoryId: 'categoryId',
  merchant: 'merchant',
  frequency: 'frequency',
  intervalValue: 'intervalValue',
  startDate: 'startDate',
  endDate: 'endDate',
  nextExecutionDate: 'nextExecutionDate',
  lastExecutionDate: 'lastExecutionDate',
  executionCount: 'executionCount',
  maxExecutions: 'maxExecutions',
  status: 'status',
  metadata: 'metadata',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RecurringTransactionExecutionScalarFieldEnum = {
  id: 'id',
  recurringTransactionId: 'recurringTransactionId',
  transactionId: 'transactionId',
  scheduledDate: 'scheduledDate',
  executedDate: 'executedDate',
  status: 'status',
  errorMessage: 'errorMessage',
  retryCount: 'retryCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DocumentUploadScalarFieldEnum = {
  id: 'id',
  householdId: 'householdId',
  fileName: 'fileName',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  documentType: 'documentType',
  status: 'status',
  uploadedBy: 'uploadedBy',
  uploadedAt: 'uploadedAt',
  processedAt: 'processedAt',
  storageUrl: 'storageUrl',
  description: 'description',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OcrResultScalarFieldEnum = {
  id: 'id',
  documentId: 'documentId',
  documentType: 'documentType',
  confidence: 'confidence',
  extractedData: 'extractedData',
  rawText: 'rawText',
  processedAt: 'processedAt',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.TransactionSuggestionScalarFieldEnum = {
  id: 'id',
  documentId: 'documentId',
  ocrResultId: 'ocrResultId',
  description: 'description',
  amountCents: 'amountCents',
  currency: 'currency',
  date: 'date',
  merchant: 'merchant',
  suggestedCategoryId: 'suggestedCategoryId',
  suggestedCategoryName: 'suggestedCategoryName',
  confidence: 'confidence',
  source: 'source',
  status: 'status',
  isApproved: 'isApproved',
  approvedAt: 'approvedAt',
  metadata: 'metadata',
  createdTransactionId: 'createdTransactionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ZakatCalculationScalarFieldEnum = {
  id: 'id',
  householdId: 'householdId',
  calculationDate: 'calculationDate',
  hijriYear: 'hijriYear',
  nisabThresholdCents: 'nisabThresholdCents',
  totalZakatableAssetsCents: 'totalZakatableAssetsCents',
  zakatAmountCents: 'zakatAmountCents',
  currency: 'currency',
  isZakatDue: 'isZakatDue',
  nextCalculationDate: 'nextCalculationDate',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ZakatAssetBreakdownScalarFieldEnum = {
  id: 'id',
  zakatCalculationId: 'zakatCalculationId',
  assetType: 'assetType',
  accountId: 'accountId',
  accountName: 'accountName',
  amountCents: 'amountCents',
  currency: 'currency',
  zakatRate: 'zakatRate',
  zakatAmountCents: 'zakatAmountCents',
  haulCompleted: 'haulCompleted',
  haulStartDate: 'haulStartDate',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.ZakatReminderScalarFieldEnum = {
  id: 'id',
  householdId: 'householdId',
  reminderType: 'reminderType',
  scheduledDate: 'scheduledDate',
  hijriDate: 'hijriDate',
  zakatAmountCents: 'zakatAmountCents',
  currency: 'currency',
  message: 'message',
  isActive: 'isActive',
  isSent: 'isSent',
  sentAt: 'sentAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ZakatPaymentScalarFieldEnum = {
  id: 'id',
  zakatCalculationId: 'zakatCalculationId',
  householdId: 'householdId',
  amountCents: 'amountCents',
  currency: 'currency',
  paymentDate: 'paymentDate',
  hijriDate: 'hijriDate',
  transactionId: 'transactionId',
  notes: 'notes',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.ShariaCompliantAccountScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  complianceStatus: 'complianceStatus',
  complianceNotes: 'complianceNotes',
  lastReviewDate: 'lastReviewDate',
  nextReviewDate: 'nextReviewDate',
  reviewedBy: 'reviewedBy',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.IslamicFinanceReportScalarFieldEnum = {
  id: 'id',
  householdId: 'householdId',
  reportType: 'reportType',
  periodStartDate: 'periodStartDate',
  periodEndDate: 'periodEndDate',
  periodType: 'periodType',
  reportData: 'reportData',
  generatedAt: 'generatedAt',
  generatedBy: 'generatedBy',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  householdId: 'householdId',
  type: 'type',
  title: 'title',
  message: 'message',
  actionUrl: 'actionUrl',
  actionText: 'actionText',
  metadata: 'metadata',
  priority: 'priority',
  status: 'status',
  channels: 'channels',
  scheduledAt: 'scheduledAt',
  sentAt: 'sentAt',
  readAt: 'readAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationDeliveryScalarFieldEnum = {
  id: 'id',
  notificationId: 'notificationId',
  channel: 'channel',
  status: 'status',
  deliveredAt: 'deliveredAt',
  failureReason: 'failureReason',
  retryCount: 'retryCount',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationPreferenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  budgetAlerts: 'budgetAlerts',
  debtReminders: 'debtReminders',
  zakatReminders: 'zakatReminders',
  priceAlerts: 'priceAlerts',
  transactionAlerts: 'transactionAlerts',
  monthlyReports: 'monthlyReports',
  securityAlerts: 'securityAlerts',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PushSubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  endpoint: 'endpoint',
  p256dh: 'p256dh',
  auth: 'auth',
  userAgent: 'userAgent',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  subject: 'subject',
  htmlContent: 'htmlContent',
  textContent: 'textContent',
  variables: 'variables',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.HouseholdRole = exports.$Enums.HouseholdRole = {
  ADMIN: 'ADMIN',
  PARTNER: 'PARTNER',
  FINANCE_STAFF: 'FINANCE_STAFF'
};

exports.InstitutionType = exports.$Enums.InstitutionType = {
  BANK: 'BANK',
  FINTECH: 'FINTECH',
  INVESTMENT: 'INVESTMENT',
  CRYPTO: 'CRYPTO'
};

exports.AccountType = exports.$Enums.AccountType = {
  ASSET: 'ASSET',
  LIABILITY: 'LIABILITY'
};

exports.CategoryType = exports.$Enums.CategoryType = {
  INCOME: 'INCOME',
  EXPENSE: 'EXPENSE',
  DEBT: 'DEBT',
  ASSET: 'ASSET',
  LIABILITY: 'LIABILITY',
  INVESTMENT: 'INVESTMENT',
  OTHER: 'OTHER'
};

exports.LedgerType = exports.$Enums.LedgerType = {
  DEBIT: 'DEBIT',
  CREDIT: 'CREDIT'
};

exports.DebtType = exports.$Enums.DebtType = {
  PERSONAL: 'PERSONAL',
  CONVENTIONAL: 'CONVENTIONAL',
  ISLAMIC: 'ISLAMIC'
};

exports.BudgetPeriod = exports.$Enums.BudgetPeriod = {
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY',
  YEARLY: 'YEARLY'
};

exports.GratitudeType = exports.$Enums.GratitudeType = {
  TREAT: 'TREAT',
  HELP: 'HELP',
  GIFT: 'GIFT'
};

exports.InsightPriority = exports.$Enums.InsightPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.RecurrenceFrequency = exports.$Enums.RecurrenceFrequency = {
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY',
  YEARLY: 'YEARLY',
  CUSTOM: 'CUSTOM'
};

exports.RecurringTransactionStatus = exports.$Enums.RecurringTransactionStatus = {
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  RECEIPT: 'RECEIPT',
  BANK_STATEMENT: 'BANK_STATEMENT',
  INVOICE: 'INVOICE',
  OTHER: 'OTHER'
};

exports.ProcessingStatus = exports.$Enums.ProcessingStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REQUIRES_REVIEW: 'REQUIRES_REVIEW'
};

exports.ZakatAssetType = exports.$Enums.ZakatAssetType = {
  CASH: 'CASH',
  GOLD: 'GOLD',
  SILVER: 'SILVER',
  BUSINESS_ASSETS: 'BUSINESS_ASSETS',
  INVESTMENT: 'INVESTMENT',
  SAVINGS: 'SAVINGS',
  CRYPTOCURRENCY: 'CRYPTOCURRENCY'
};

exports.ZakatReminderType = exports.$Enums.ZakatReminderType = {
  ANNUAL_CALCULATION: 'ANNUAL_CALCULATION',
  PAYMENT_DUE: 'PAYMENT_DUE',
  HAUL_COMPLETION: 'HAUL_COMPLETION',
  NISAB_THRESHOLD_MET: 'NISAB_THRESHOLD_MET'
};

exports.ShariaComplianceStatus = exports.$Enums.ShariaComplianceStatus = {
  COMPLIANT: 'COMPLIANT',
  NON_COMPLIANT: 'NON_COMPLIANT',
  UNDER_REVIEW: 'UNDER_REVIEW',
  QUESTIONABLE: 'QUESTIONABLE'
};

exports.IslamicReportType = exports.$Enums.IslamicReportType = {
  ZAKAT_CALCULATION: 'ZAKAT_CALCULATION',
  SHARIA_COMPLIANCE: 'SHARIA_COMPLIANCE',
  ISLAMIC_DEBT_SUMMARY: 'ISLAMIC_DEBT_SUMMARY',
  HALAAL_INCOME_ANALYSIS: 'HALAAL_INCOME_ANALYSIS',
  COMPREHENSIVE: 'COMPREHENSIVE'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  BUDGET_EXCEEDED: 'BUDGET_EXCEEDED',
  BUDGET_WARNING: 'BUDGET_WARNING',
  DEBT_PAYMENT_DUE: 'DEBT_PAYMENT_DUE',
  ZAKAT_REMINDER: 'ZAKAT_REMINDER',
  PRICE_ALERT: 'PRICE_ALERT',
  TRANSACTION_CREATED: 'TRANSACTION_CREATED',
  ACCOUNT_BALANCE_LOW: 'ACCOUNT_BALANCE_LOW',
  RECURRING_TRANSACTION_FAILED: 'RECURRING_TRANSACTION_FAILED',
  MONTHLY_REPORT_READY: 'MONTHLY_REPORT_READY',
  SECURITY_ALERT: 'SECURITY_ALERT',
  HOUSEHOLD_INVITATION: 'HOUSEHOLD_INVITATION',
  SYSTEM_MAINTENANCE: 'SYSTEM_MAINTENANCE'
};

exports.NotificationPriority = exports.$Enums.NotificationPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.NotificationStatus = exports.$Enums.NotificationStatus = {
  PENDING: 'PENDING',
  SENT: 'SENT',
  DELIVERED: 'DELIVERED',
  READ: 'READ',
  FAILED: 'FAILED'
};

exports.NotificationChannel = exports.$Enums.NotificationChannel = {
  IN_APP: 'IN_APP',
  EMAIL: 'EMAIL',
  PUSH: 'PUSH'
};

exports.Prisma.ModelName = {
  User: 'User',
  Household: 'Household',
  HouseholdMember: 'HouseholdMember',
  Institution: 'Institution',
  Account: 'Account',
  Merchant: 'Merchant',
  Category: 'Category',
  Transaction: 'Transaction',
  TransactionTag: 'TransactionTag',
  TransactionSplit: 'TransactionSplit',
  LedgerEntry: 'LedgerEntry',
  Debt: 'Debt',
  DebtPayment: 'DebtPayment',
  Budget: 'Budget',
  BudgetCategory: 'BudgetCategory',
  WishlistItem: 'WishlistItem',
  PriceHistory: 'PriceHistory',
  GratitudeEntry: 'GratitudeEntry',
  ExchangeRate: 'ExchangeRate',
  Passkey: 'Passkey',
  Session: 'Session',
  UserEvent: 'UserEvent',
  SpendingPattern: 'SpendingPattern',
  FinancialInsight: 'FinancialInsight',
  RecurringTransaction: 'RecurringTransaction',
  RecurringTransactionExecution: 'RecurringTransactionExecution',
  DocumentUpload: 'DocumentUpload',
  OcrResult: 'OcrResult',
  TransactionSuggestion: 'TransactionSuggestion',
  ZakatCalculation: 'ZakatCalculation',
  ZakatAssetBreakdown: 'ZakatAssetBreakdown',
  ZakatReminder: 'ZakatReminder',
  ZakatPayment: 'ZakatPayment',
  ShariaCompliantAccount: 'ShariaCompliantAccount',
  IslamicFinanceReport: 'IslamicFinanceReport',
  Notification: 'Notification',
  NotificationDelivery: 'NotificationDelivery',
  NotificationPreference: 'NotificationPreference',
  PushSubscription: 'PushSubscription',
  EmailTemplate: 'EmailTemplate'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
