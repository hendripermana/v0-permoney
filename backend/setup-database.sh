#!/bin/bash

# ============================================================================
# PERMONEY DATABASE SETUP SCRIPT
# ============================================================================
# This script helps you set up PostgreSQL database for Permoney application

set -e

echo "ðŸš€ Permoney Database Setup"
echo "=========================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}âœ“${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}âš ${NC} $1"
}

print_error() {
    echo -e "${RED}âœ—${NC} $1"
}

print_info() {
    echo -e "${BLUE}â„¹${NC} $1"
}

# Check if PostgreSQL is installed
check_postgresql() {
    print_info "Checking PostgreSQL installation..."
    
    if command -v psql &> /dev/null; then
        print_status "PostgreSQL is installed"
        psql --version
    else
        print_error "PostgreSQL is not installed"
        echo ""
        echo "Please install PostgreSQL:"
        echo "  macOS: brew install postgresql"
        echo "  Ubuntu: sudo apt-get install postgresql postgresql-contrib"
        echo "  Windows: Download from https://www.postgresql.org/download/"
        exit 1
    fi
}

# Check if PostgreSQL service is running
check_postgresql_service() {
    print_info "Checking PostgreSQL service..."
    
    if pg_isready -q; then
        print_status "PostgreSQL service is running"
    else
        print_warning "PostgreSQL service is not running"
        echo ""
        echo "Please start PostgreSQL service:"
        echo "  macOS: brew services start postgresql"
        echo "  Ubuntu: sudo systemctl start postgresql"
        echo "  Windows: Start PostgreSQL service from Services"
        exit 1
    fi
}

# Get database configuration from user
get_database_config() {
    echo ""
    print_info "Database Configuration"
    echo "========================"
    
    # Default values
    DB_HOST="localhost"
    DB_PORT="5432"
    DB_NAME="permoney"
    
    # Get user input
    read -p "Database host [localhost]: " input_host
    DB_HOST=${input_host:-$DB_HOST}
    
    read -p "Database port [5432]: " input_port
    DB_PORT=${input_port:-$DB_PORT}
    
    read -p "Database name [permoney]: " input_name
    DB_NAME=${input_name:-$DB_NAME}
    
    read -p "Database username [postgres]: " input_user
    DB_USER=${input_user:-postgres}
    
    read -s -p "Database password: " input_pass
    echo ""
    DB_PASS=${input_pass}
    
    if [ -z "$DB_PASS" ]; then
        print_error "Database password is required"
        exit 1
    fi
    
    # Construct DATABASE_URL
    DATABASE_URL="postgresql://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}"
    
    print_status "Database configuration:"
    echo "  Host: $DB_HOST"
    echo "  Port: $DB_PORT"
    echo "  Database: $DB_NAME"
    echo "  Username: $DB_USER"
    echo "  Password: [HIDDEN]"
}

# Create database and user
create_database() {
    print_info "Creating database and user..."
    
    # Create database
    PGPASSWORD=$DB_PASS psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d postgres -c "CREATE DATABASE $DB_NAME;" 2>/dev/null || {
        print_warning "Database '$DB_NAME' might already exist"
    }
    
    print_status "Database '$DB_NAME' is ready"
}

# Test database connection
test_connection() {
    print_info "Testing database connection..."
    
    if PGPASSWORD=$DB_PASS psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c "SELECT 1;" &>/dev/null; then
        print_status "Database connection successful"
    else
        print_error "Database connection failed"
        exit 1
    fi
}

# Create .env file
create_env_file() {
    print_info "Creating .env file..."
    
    cat > .env << EOF
# ============================================================================
# PERMONEY BACKEND CONFIGURATION - DEVELOPMENT
# ============================================================================
# Generated by setup-database.sh on $(date)

# ============================================================================
# DATABASE CONFIGURATION
# ============================================================================
DATABASE_URL="$DATABASE_URL"
DB_MAX_CONNECTIONS="10"
DB_CONNECTION_TIMEOUT="30000"

# ============================================================================
# AUTHENTICATION & SECURITY
# ============================================================================
JWT_SECRET="dev-jwt-secret-key-change-in-production-$(date +%s)"
JWT_ACCESS_EXPIRES_IN="15m"
JWT_REFRESH_EXPIRES_IN="7d"
SESSION_SECRET="dev-session-secret-key-change-in-production-$(date +%s)"
SESSION_MAX_AGE="86400000"
PASSKEY_CHALLENGE_TIMEOUT="300000"

# ============================================================================
# APPLICATION SETTINGS
# ============================================================================
PORT="3001"
NODE_ENV="development"
API_PREFIX="api"
LOG_LEVEL="info"
CORS_ORIGINS="http://localhost:3000,http://localhost:3002"
ENABLE_HELMET="true"
ENABLE_CSRF="false"
ENABLE_SWAGGER="true"
RATE_LIMIT_WINDOW="60000"
RATE_LIMIT_MAX="100"

# ============================================================================
# CACHE CONFIGURATION (Optional)
# ============================================================================
REDIS_URL="redis://localhost:6379"
REDIS_MAX_RETRIES="3"
REDIS_RETRY_DELAY="100"
CACHE_DEFAULT_TTL="3600"
CACHE_MAX_ITEMS="1000"
CACHE_ENABLE_COMPRESSION="false"

# ============================================================================
# EXTERNAL SERVICES (Optional)
# ============================================================================
EXCHANGE_RATE_API_URL="https://api.exchangerate-api.com/v4/latest"
EXCHANGE_RATE_API_KEY=""
EXCHANGE_RATE_API_TIMEOUT="5000"
OCR_SERVICE_URL=""
OCR_SERVICE_API_KEY=""
OCR_SERVICE_TIMEOUT="30000"
EMAIL_PROVIDER="sendgrid"
EMAIL_API_KEY=""
FROM_EMAIL="noreply@permoney.com"

# ============================================================================
# FILE UPLOAD (Optional)
# ============================================================================
UPLOAD_DIR="./uploads"
MAX_FILE_SIZE="10485760"
EOF

    print_status ".env file created successfully"
}

# Run Prisma migrations
run_migrations() {
    print_info "Running database migrations..."
    
    if [ -f "package.json" ]; then
        npm install
        npx prisma generate
        npx prisma migrate dev --name init
        print_status "Database migrations completed"
    else
        print_warning "package.json not found, skipping migrations"
        echo "Please run 'npx prisma migrate dev' manually"
    fi
}

# Main execution
main() {
    echo ""
    print_info "Starting database setup..."
    echo ""
    
    check_postgresql
    check_postgresql_service
    get_database_config
    create_database
    test_connection
    create_env_file
    run_migrations
    
    echo ""
    print_status "Database setup completed successfully!"
    echo ""
    print_info "Next steps:"
    echo "1. Review the generated .env file"
    echo "2. Start the backend: npm run start:dev"
    echo "3. Start the frontend: npm run dev (from project root)"
    echo ""
    print_warning "Remember to change JWT_SECRET and SESSION_SECRET in production!"
    echo ""
}

# Run main function
main "$@"
